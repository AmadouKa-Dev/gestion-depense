name: CI - Gestion de d√©pense

on:
  push:
    branches:
      - master

jobs:
    # ==========================
  # 1Ô∏è‚É£ LINT PYTHON
  # ==========================
  lint:
    name: Lint Backend (Ruff)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.7

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install -r requirements.txt
          pip install ruff

      - name: Run Ruff linter
        working-directory: backend
        run: ruff check .

  # ==========================
  # 2Ô∏è‚É£ TESTS BACKEND DJANGO
  # ==========================
  test-backend:
    name: Test Backend (Django)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U ${{ vars.POSTGRES_USER }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ vars.DEBUG }}
      DB_ENGINE: ${{ vars.DB_ENGINE }}
      DB_NAME: ${{ vars.POSTGRES_DB }}
      DB_USER: ${{ vars.POSTGRES_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: localhost
      DB_PORT: 5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10.7"

      - name: Install dependencies
        working-directory: backend
        run: pip install -r requirements.txt coverage

      - name: Wait for Postgres
        run: |
          echo "Waiting for Postgres to accept connections..."
          for i in {1..10}; do
            pg_isready -h localhost -p 5432 -U ${{ vars.POSTGRES_USER }} && echo "Postgres is ready" && exit 0
            echo "Waiting for Postgres..."
            sleep 2
          done

          echo "Postgres did not become ready in time" && exit 1

      - name: Run Django tests with coverage
        working-directory: backend
        env:
          DATABASE_URL: postgres://${{ vars.POSTGRES_USER }}:${{ secrets.DB_PASSWORD }}@localhost:5432/${{ vars.POSTGRES_DB }}
        run: |
          python manage.py migrate
          coverage run manage.py test
          coverage html

      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/htmlcov

  # ==========================
  # 3Ô∏è‚É£ TESTS FRONTEND NEXT.JS
  # ==========================
  test-frontend:
    name: Test Frontend (Next.js)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests with coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

# ==========================
# 4Ô∏è‚É£ BUILD & PUSH IMAGES BACKEND + FRONTEND
# ==========================
  docker-push:
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]   # üëà Ne d√©marre que si les tests passent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Build backend ---
      - name: Build backend image
        working-directory: backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-backend:latest .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-backend:latest ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-backend:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-backend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-backend:${{ github.sha }}

      # --- Build frontend ---
      - name: Build frontend image
        working-directory: frontend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-frontend:latest .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-frontend:latest ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-frontend:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gestion-depense-frontend:${{ github.sha }}