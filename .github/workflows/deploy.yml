name: CI - Gestion de d√©pense

on:
  push:
    branches:
      - master

jobs:
    # ==========================
  # 1Ô∏è‚É£ LINT PYTHON
  # ==========================
  lint:
    name: Lint Backend (Ruff)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.7

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install -r requirements.txt
          pip install ruff

      - name: Run Ruff linter
        working-directory: backend
        run: ruff check .

  # ==========================
  # 2Ô∏è‚É£ TESTS BACKEND DJANGO
  # ==========================
  test-backend:
    name: Test Backend (Django)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -h postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DB_ENGINE: ${{ secrets.DB_ENGINE }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10.7"

      - name: Install dependencies
        working-directory: backend
        run: pip install -r requirements.txt coverage

      - name: Wait for Postgres
        run: sleep 10

      - name: Run Django tests with coverage
        working-directory: backend
        env:
          DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.DB_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }}
        run: |
          python manage.py migrate
          coverage run manage.py test
          coverage html

      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/htmlcov

  # ==========================
  # 3Ô∏è‚É£ TESTS FRONTEND NEXT.JS
  # ==========================
  test-frontend:
    name: Test Frontend (Next.js)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests with coverage
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: frontend/coverage

# ==========================
# 4Ô∏è‚É£ BUILD DOCKER COMPOSE
# ==========================
  docker-build:
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend]   # üëà Ne d√©marre que si les tests passent

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and run Docker Compose
        run: |
          docker compose -f docker-compose.yml up --build -d
          sleep 10
          docker ps -a

      - name: Stop containers
        if: always()
        run: docker compose down